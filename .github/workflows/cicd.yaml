name: Go CI/CD

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'helm/**'
      - 'k8s/**'
      - 'README.md'

jobs:
  sonar-analysis:
    runs-on: ubuntu-latest

    services:
      sonar:
        image: sonarqube:latest
        options: >-
          --health-cmd="curl --silent --fail http://localhost:9000/api/system/health" 
          --health-timeout=120s --health-retries=3
        ports:
          - 9000:9000
        env:
          SONARQUBE_JDBC_URL: jdbc:postgresql://localhost:5432/sonar
          SONARQUBE_JDBC_USERNAME: sonar
          SONARQUBE_JDBC_PASSWORD: sonar

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go 1.22
        uses: actions/setup-go@v4
        with:
          go-version: 1.22.2

      - name: Install SonarScanner
        run: |
          curl -sSLo /tmp/sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
          unzip /tmp/sonar-scanner-cli.zip -d /tmp
          sudo mv /tmp/sonar-scanner-*/ /opt/sonar-scanner

      - name: Run SonarQube Scanner
        run: |
          /opt/sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectKey=go-web-app \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Wait for SonarQube to be ready
        run: |
          curl --silent --fail http://localhost:9000/api/system/health
          
  lint:
    runs-on: ubuntu-latest
    needs: sonar-analysis

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go 1.22
        uses: actions/setup-go@v4
        with:
          go-version: 1.22.2

      - name: Check Go Formatting (gofmt)
        run: |
          if [ -n "$(gofmt -l main.go)" ]; then
            echo "The following files are not formatted:"
            gofmt -l .
            exit 1
          fi

  type-check:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go 1.22
        uses: actions/setup-go@v4
        with:
          go-version: 1.22.2

      - name: Run Type Check (go vet)
        run: go vet main.go

  static-analysis:
    runs-on: ubuntu-latest
    needs: type-check

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go 1.22
        uses: actions/setup-go@v4
        with:
          go-version: 1.22.2

      - name: Static Analysis (golangci-lint)
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run

  unit-test:
    runs-on: ubuntu-latest
    needs: static-analysis

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go 1.22
        uses: actions/setup-go@v4
        with:
          go-version: 1.22.2

      - name: Run Unit Tests
        run: go test -v main_test.go

  build:
    runs-on: ubuntu-latest
    needs: unit-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go 1.22
        uses: actions/setup-go@v4
        with:
          go-version: 1.22.2

      - name: Build Go application
        run: go build -o go-web-app

  push:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/go-web-app:${{ github.run_id }}

  update-helm-chart:
    runs-on: ubuntu-latest
    needs: push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Helm Chart
        run: |
          sed -i 's|tag: .*|tag: "${{ github.run_id }}"|' helm/go-web-app-chart/values.yaml
          sed -i 's|repository: .*|repository: ${{ secrets.ACR_LOGIN_SERVER }}/go-web-app|' helm/go-web-app-chart/values.yaml

      - name: Commit and push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "lingammani2@gmail.com"
          git config --global user.name "rushimanikantalingam"
          git add helm/go-web-app-chart/values.yaml
          git commit -m "Update Helm Chart with latest image tag"
          git pull origin main --rebase
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD:main

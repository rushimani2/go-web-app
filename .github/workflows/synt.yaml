name: CDK8s Synth to Helm (TypeScript)

on:
  push:
    paths:
      - '**'
    branches:
      - main

jobs:
  synth-and-copy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up CDK8s, write code, synthesize
        run: |
          cd cdk8s-go-web
          npm init -y
          npm install cdk8s constructs typescript cdk8s-plus-25
          npm install -g cdk8s-cli

          # Create tsconfig.json
          echo '{
            "compilerOptions": {
              "target": "ES2020",
              "module": "CommonJS",
              "outDir": "dist",
              "strict": true
            },
            "include": ["**/*.ts"]
          }' > tsconfig.json

          # Create main.ts
          echo 'import { App, Chart } from "cdk8s";
          import { Construct } from "constructs";
          import * as k8s from "cdk8s-plus-25";

          class MyChart extends Chart {
            constructor(scope: Construct, id: string) {
              super(scope, id);

              const label = { app: "web" };

              new k8s.Deployment(this, "web-deployment", {
                metadata: { name: "web" },
                spec: {
                  selector: { matchLabels: label },
                  replicas: 1,
                  template: {
                    metadata: { labels: label },
                    spec: {
                      containers: [{ name: "nginx", image: "nginx" }]
                    }
                  }
                }
              });

              new k8s.Service(this, "web-service", {
                metadata: { name: "web-service" },
                spec: {
                  type: k8s.ServiceType.CLUSTER_IP,
                  ports: [{ port: 80, targetPort: 80 }],
                  selector: label
                }
              });

              new k8s.Ingress(this, "web-ingress", {
                metadata: { name: "web-ingress" },
                spec: {
                  rules: [
                    {
                      host: "web.local",
                      http: {
                        paths: [
                          {
                            path: "/",
                            pathType: "Prefix",
                            backend: {
                              service: {
                                name: "web-service",
                                port: { number: 80 }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              });
            }
          }

          const app = new App();
          new MyChart(app, "my-chart");
          app.synth();' > main.ts

          # Create cdk8s.yaml
          echo 'app: node dist/main.js
          language: typescript' > cdk8s.yaml

          npx tsc
          cdk8s synth --output temp-synth-output
          ls -l temp-synth-output

      - name: Copy YAML to Helm chart
        run: |
          mkdir -p helm/go-web-app-chart/templates/generated
          cp cdk8s-go-web/temp-synth-output/*.k8s.yaml helm/go-web-app-chart/templates/generated/

      - name: List Helm chart files
        run: ls -l helm/go-web-app-chart/templates/generated

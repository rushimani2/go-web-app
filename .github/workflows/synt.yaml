name: CDK8s Synth to Helm (TypeScript, No Local Setup)

on:
  push:
    paths:
      - '**'
    branches:
      - main

jobs:
  synth-and-copy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up CDK8s environment, compile, and synth
        run: |
          # Change to the directory where CDK8s code is located
          cd cdk8s-go-web

          # Initialize npm and install dependencies
          npm init -y
          npm install cdk8s constructs typescript cdk8s-plus-25
          npm install -g cdk8s-cli

          # Create TypeScript configuration file (tsconfig.json)
          cat <<EOF > tsconfig.json
          {
            "compilerOptions": {
              "target": "ES2020",
              "module": "CommonJS",
              "strict": true
            },
            "include": ["**/*.ts"]
          }
          EOF

          # Create the corrected main.ts file with only the deployment
          cat <<EOF > main.ts
          import { App, Chart } from 'cdk8s';
          import { Construct } from 'constructs';
          import * as k8s from 'cdk8s-plus-25';

          class MyChart extends Chart {
            constructor(scope: Construct, id: string) {
              super(scope, id);

              // Create a deployment with a label
              new k8s.Deployment(this, 'web-deployment', {
                metadata: { name: 'web' },
                containers: [{ image: 'nginx' }],
              });
            }
          }

          const app = new App();
          new MyChart(app, 'my-chart');
          app.synth();
          EOF

          # Compile TypeScript to JavaScript (this will generate main.js in the current directory)
          npx tsc

          # Create cdk8s.yaml for CDK8s configuration
          cat <<EOF > cdk8s.yaml
          app: node main.js
          language: typescript
          EOF

          # Synthesize the Kubernetes YAML files directly into the current directory
          cdk8s synth --output temp-synth-output

          # List synthesized output files for verification
          ls -al temp-synth-output

      - name: Copy synthesized YAML to Helm chart templates
        run: |
          # Create necessary directories if they don't exist
          mkdir -p helm/go-web-app-chart/templates/generated
          
          # Copy the generated Kubernetes YAML files into Helm chart templates
          cp cdk8s-go-web/temp-synth-output/*.k8s.yaml helm/go-web-app-chart/templates/generated/

      - name: List files in Helm chart templates directory
        run: |
          echo "Listing files in helm/go-web-app-chart/templates/generated/"
          ls -al helm/go-web-app-chart/templates/generated/

      - name: Commit synthesized files to the repository
        run: |
          # Set up git configuration and commit the changes
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          # Add the modified files to git
          git add cdk8s-go-web/main.ts
          git add cdk8s-go-web/cdk8s.yaml
          git add cdk8s-go-web/temp-synth-output/*.k8s.yaml
          git add cdk8s-go-web/tsconfig.json

          # Update .gitignore to exclude node_modules and temp-synth-output
          echo "cdk8s-go-web/node_modules/" >> .gitignore
          echo "cdk8s-go-web/temp-synth-output/" >> .gitignore

          # Commit and push changes
          git commit -m "Add synthesized Kubernetes Deployment YAML and update main.ts"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

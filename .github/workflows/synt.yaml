name: CDK8s Synth to Helm (TypeScript, No Local Setup)

on:
  push:
    paths:
      - '**'
    branches:
      - main

jobs:
  synth-and-copy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up CDK8s environment, compile, and synth
        run: |
          cd cdk8s-go-web

          # Initialize Node.js project
          npm init -y

          # Install CDK8s dependencies
          npm install cdk8s constructs typescript cdk8s-plus-25

          # Install CDK8s CLI globally
          npm install -g cdk8s-cli

          # Create tsconfig.json for TypeScript compilation
          echo '{
            "compilerOptions": {
              "target": "ES2020",
              "module": "CommonJS",
              "outDir": "dist",
              "strict": true
            },
            "include": ["**/*.ts"]
          }' > tsconfig.json

          # Create main.ts file with resources
          echo 'import { App, Chart } from "cdk8s";
          import { Construct } from "constructs";
          import * as k8s from "cdk8s-plus-25";
          
          class MyChart extends Chart {
            constructor(scope: Construct, id: string) {
              super(scope, id);

              const appLabel = { app: "go-web-app" };

              // Create Deployment
              const deployment = new k8s.Deployment(this, "go-web-app-deployment", {
                metadata: {
                  name: "go-web-app",
                  labels: appLabel,
                },
                replicas: 1,
                selector: { matchLabels: appLabel },
              });

              // Add container to the Deployment
              deployment.addContainer({
                name: "go-web-app",
                image: "rushibindu/go-web-app:{{ .Values.image.tag }}",
                ports: [{ containerPort: 8080 }],
              });

              // Create Service
              new k8s.Service(this, "go-web-app-service", {
                metadata: {
                  name: "go-web-app",
                  labels: appLabel,
                },
                ports: [
                  {
                    port: 80,
                    targetPort: 8080,
                    protocol: k8s.Protocol.TCP,
                  },
                ],
                selector: appLabel,
                type: k8s.ServiceType.LOAD_BALANCER,
              });
            }
          }
          
          const app = new App();
          new MyChart(app, "go-web-app-chart");
          app.synth();' > main.ts

          # Create cdk8s.yaml to point to the compiled file
          echo 'app: node dist/main.js
          language: typescript' > cdk8s.yaml

          # Compile TypeScript to JavaScript
          npx tsc

          # Synthesize Kubernetes manifests
          cdk8s synth --output temp-synth-output

          # List files in the synthesized output directory
          ls -l temp-synth-output

      - name: Copy synthesized YAML to Helm chart templates
        run: |
          mkdir -p helm/go-web-app-chart/templates/generated
          cp cdk8s-go-web/temp-synth-output/*.k8s.yaml helm/go-web-app-chart/templates/generated/
